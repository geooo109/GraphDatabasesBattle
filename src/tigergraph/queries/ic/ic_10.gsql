//graph schema is on page 13 https://ldbc.github.io/ldbc_snb_docs/ldbc-snb-specification.pdf
//IC 10 query description is on page 41 https://ldbc.github.io/ldbc_snb_docs/ldbc-snb-specification.pdf

USE GRAPH ldbc_snb
DROP QUERY ic_10

CREATE QUERY ic_10(VERTEX<Person> personId, INT month, INT nextMonth) FOR GRAPH ldbc_snb {
  TYPEDEF TUPLE<INT personId, STRING personFirstName, STRING personLastName, INT commonInterestScore, STRING personGender, STRING personCityName> friendInfo;

  OrAccum @visited;
  SumAccum<STRING> @city;
  //SetAccum<VERTEX<Tag>> @@tagInterest;
  OrAccum @valid = false;
	OrAccum @hasCommonInterest;
  SumAccum<INT> @commonInterestScore;
  HeapAccum<friendInfo>(10, commonInterestScore DESC, personId ASC) @@friendInfoTop;

  vPerson = { personId };
  vTag = 
    SELECT t
    FROM vPerson:s-(Person_HAS_INTEREST_Tag:e)->Tag:t
    POST-ACCUM t.@valid = true;
    //POST-ACCUM @@tagInterest += t;

  vFriend1h = 
    SELECT t
    FROM vPerson:s-((Person_KNOWS_Person|Person_KNOWS_Person_REVERSE):e)->Person:t
    ACCUM 
      s.@visited += True,
      t.@visited += True;

  vFriend2h = 
    SELECT t
    FROM vFriend1h:s-((Person_KNOWS_Person|Person_KNOWS_Person_REVERSE):e)->Person:t
    WHERE t.@visited == False
    AND ((month(t.birthday) == month AND day(t.birthday) >= 21) OR 
        (month(t.birthday) == nextMonth AND day(t.birthday) < 22));

  vFriend2h = 
    SELECT s
    FROM vFriend2h:s-(Person_IS_LOCATED_IN_City:e)->City:t
    ACCUM s.@city = t.name;

  vPost = 
    SELECT t
    FROM vFriend2h:s-(Post_HAS_CREATOR_Person_REVERSE:e)-Post:t;

  findCommonInterest = 
    SELECT t
    FROM vPost:s-(Post_HAS_TAG_Tag:e)->Tag:t
    ACCUM CASE WHEN t.@valid THEN s.@hasCommonInterest += True END;
    //ACCUM CASE WHEN @@tagInterest.contains(t) THEN s.@hasCommonInterest += True END;

	calcCommonInterestScore = 
	  SELECT t
	  FROM vPost:s-(Post_HAS_CREATOR_Person:e)->Person:t
	  ACCUM
	    CASE
	      WHEN s.@hasCommonInterest == True THEN
	        t.@commonInterestScore += 1
	      ELSE
	        t.@commonInterestScore += (-1)
	    END;

	aggFriend2h = 
    SELECT v
    FROM vFriend2h:v
    ACCUM @@friendInfoTop += friendInfo(v.id, v.firstName, v.lastName, v.@commonInterestScore, v.gender, v.@city);

  PRINT @@friendInfoTop;
}

INSTALL QUERY ic_10