//graph schema is on page 13 https://ldbc.github.io/ldbc_snb_docs/ldbc-snb-specification.pdf
//BI 11 query description is on page 69 https://ldbc.github.io/ldbc_snb_docs/ldbc-snb-specification.pdf

USE GRAPH ldbc_snb
DROP QUERY bi_11

CREATE QUERY bi_11(STRING countryName, Set<STRING> blacklist) FOR GRAPH ldbc_snb { 
  TYPEDEF TUPLE<INT personId, STRING tagName, INT likeCount, INT replyCount> reply;

  SetAccum<STRING> @@blacklistP;
  AndAccum @isValid;
  SumAccum<INT> @creatorId;
  SetAccum<VERTEX<Comment>> @@validComments;
  SetAccum<VERTEX<Comment>> @@replyAll;
  SetAccum<STRING> @tagNames;
  SumAccum<INT> @likeCount;
  GroupByAccum<INT personId, STRING tagName, SumAccum<INT> likeCount, SumAccum<INT> replyCount> @@replyGroup;
  HeapAccum<reply>(100, likeCount DESC, personId ASC, tagName ASC) @@replyTop;

  SetAccum<INT> @postTagSet2;
  SetAccum<INT> @commentTagSet2;
  SetAccum<INT> @replyTagSet2;
  OrAccum @valid = false;
  //SetAccum<INT> @@invalidReplySet;
	
  FOREACH word IN blacklist DO
    @@blacklistP += ("%" + word + "%");
  END;

  vCountry = { Country.* };
  vCity = 
    SELECT t
    FROM vCountry:s-(City_IS_PART_OF_Country_REVERSE:e)->City:t
    WHERE s.name == countryName;

  vPerson =
    SELECT t
    FROM vCity:s-(Person_IS_LOCATED_IN_City_REVERSE:e)->Person:t;

  vComments = 
    SELECT t
    FROM vPerson:s-(Comment_HAS_CREATOR_Person_REVERSE:e)->Comment:t
    ACCUM 
      t.@creatorId = s.id,
      FOREACH word IN @@blacklistP DO
        CASE WHEN t.content LIKE word THEN
          t.@isValid += False,
          BREAK
        END
      END
    POST-ACCUM CASE WHEN t.@isValid THEN @@validComments += t END;
    
  vComments = { @@validComments };
  vMessage =
    SELECT t
    FROM vComments:s-((Comment_REPLY_OF_Comment|Comment_REPLY_OF_Post):e)->(Comment|Post):t
    POST-ACCUM @@replyAll += s;

  vReply = { @@replyAll };

  vComment =
    SELECT t
    FROM vReply:s-(Comment_REPLY_OF_Comment:e)->Comment:t;
	
  vPost = 
    SELECT t
    FROM vReply:s-(Comment_REPLY_OF_Post:e)->Post:t;
	
  vCommentTag =
    SELECT t
    FROM vComment:s-(Comment_HAS_TAG_Tag:e)->Tag:t
    ACCUM s.@commentTagSet2 += t.id;
	
  vPostTag =
    SELECT t
    FROM vPost:s-(Post_HAS_TAG_Tag:e)->Tag:t
    ACCUM s.@postTagSet2 += t.id;
	
  vComment =
    SELECT t
    FROM vReply:s-(Comment_REPLY_OF_Comment:e)->Comment:t
    ACCUM s.@replyTagSet2 += t.@commentTagSet2;
  	
  vPost = 
    SELECT t
    FROM vReply:s-(Comment_REPLY_OF_Post:e)->Post:t
    ACCUM s.@replyTagSet2 += t.@postTagSet2;
	
  vReply2 =
    SELECT s
    FROM vReply:s-(Comment_HAS_TAG_Tag:e)->Tag:t
    WHERE s.@replyTagSet2.contains(t.id)
    ACCUM s.@valid = true;
    //ACCUM @@invalidReplySet += s.id;
	
  vReply =
    SELECT s
    FROM vReply:s
    WHERE NOT s.@valid;
    //WHERE NOT @@invalidReplySet.contains(s.id);
	
  vComments =
    SELECT s
    FROM vReply:s-(Comment_HAS_TAG_Tag:e)->Tag:t
    ACCUM s.@tagNames += t.name;

  vReply =
    SELECT s
    FROM vReply:s-(Person_LIKES_Comment_REVERSE:e)->Person:t
    ACCUM s.@likeCount += 1
    POST-ACCUM 
      FOREACH tn IN s.@tagNames DO
        @@replyGroup += (s.@creatorId, tn -> s.@likeCount, 1)
      END;

  FOREACH (p,t,l,r) IN @@replyGroup DO
    @@replyTop += reply(p,t,l,r);
  END;

  PRINT @@replyTop;
}

INSTALL QUERY bi_11