//graph schema is on page 13 https://ldbc.github.io/ldbc_snb_docs/ldbc-snb-specification.pdf
//BI 15 query description is on page 73 https://ldbc.github.io/ldbc_snb_docs/ldbc-snb-specification.pdf

USE GRAPH ldbc_snb
DROP QUERY bi_15

CREATE QUERY bi_15(STRING countryName) FOR GRAPH ldbc_snb {

  TYPEDEF TUPLE<INT personId, INT count_> socialNormalPerson;
  SumAccum<INT> @@numFriendsAll;
  SumAccum<INT> @numFriends;
  OrAccum @inCountry;
  SumAccum<INT> @@totalInCountry;
  HeapAccum<socialNormalPerson>(100, personId ASC) @@socialNormalPersonTop;

  INT socialNormal = 0;

  vCountry = { Country.* };
  vCity = 
    SELECT t
    FROM vCountry:s-(City_IS_PART_OF_Country_REVERSE:e)->City:t
    WHERE s.name == countryName;

  vPerson =
    SELECT t
    FROM vCity:s-(Person_IS_LOCATED_IN_City_REVERSE:e)->Person:t
    ACCUM t.@inCountry += true, @@totalInCountry += 1;

  // phase 1. calculate social normal, i.e. floor(avg(#friends))
  vFriend =
    SELECT t
    FROM vPerson:s-((Person_KNOWS_Person|Person_KNOWS_Person_REVERSE):e)->Person:t
    WHERE t.@inCountry == true
    ACCUM @@numFriendsAll += 1;
   
  if (@@numFriendsAll == 0) THEN
    PRINT "No Match";
    RETURN;
  END;
  
   socialNormal = floor(@@numFriendsAll / @@totalInCountry);

   print @@numFriendsAll;
   print @@totalInCountry;

  // phase 2. find persons in Country, whose # friends in Country == socialNormal

  vPer =
    SELECT s
    FROM vPerson:s-((Person_KNOWS_Person|Person_KNOWS_Person_REVERSE):e)->Person:t
    WHERE t.@inCountry == true
    ACCUM s.@numFriends += 1
    POST-ACCUM 
      CASE 
        WHEN s.@numFriends == socialNormal THEN 
          @@socialNormalPersonTop += socialNormalPerson(s.id, s.@numFriends) 
      END;

  PRINT @@socialNormalPersonTop;
}
INSTALL QUERY bi_15