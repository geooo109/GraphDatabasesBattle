//graph schema is on page 13 https://ldbc.github.io/ldbc_snb_docs/ldbc-snb-specification.pdf
//BI 10 query description is on page 68 https://ldbc.github.io/ldbc_snb_docs/ldbc-snb-specification.pdf

USE GRAPH ldbc_snb
DROP QUERY bi_10

CREATE QUERY bi_10(STRING tagName, DATETIME minDate) FOR GRAPH ldbc_snb { 
  OrAccum @isInterested;
  OrAccum @hasTag;
  SumAccum<INT> @score;
  SumAccum<INT> @friendScore;
  SetAccum<VERTEX<Person>> @@personSet;
  
  vTag = { Tag.* };
  vTag = 
    SELECT v
    FROM vTag:v
    WHERE v.name == tagName;
  
  vPerson1 =
    SELECT t
    FROM vTag:s-(Person_HAS_INTEREST_Tag_REVERSE:e)->Person:t 
    ACCUM t.@isInterested = TRUE,
        @@personSet += t,
        t.@score += 100;
  
  vMessage =
    SELECT t
    FROM vTag:s-((Post_HAS_TAG_Tag_REVERSE|Comment_HAS_TAG_Tag_REVERSE):e)->(Post|Comment):t
    WHERE t.creationDate > minDate
    ACCUM t.@hasTag = TRUE;
  
  vPerson2 =
    SELECT t
    FROM vMessage:s-((Post_HAS_CREATOR_Person|Comment_HAS_CREATOR_Person):e)->Person:t
    ACCUM @@personSet += t;
  
  vPerson = { @@personSet };
  
  vPerson =
    SELECT s
    FROM vPerson:s-((Post_HAS_CREATOR_Person_REVERSE|Comment_HAS_CREATOR_Person_REVERSE):e)->(Post|Comment):t
    WHERE t.@hasTag
    ACCUM s.@score += 1;
  
  vFriend =
    SELECT t
    FROM vPerson:s-((Person_KNOWS_Person|Person_KNOWS_Person_REVERSE):e)->Person:t
    ACCUM s.@friendScore += t.@score;
  
  res =
    SELECT s
    FROM vPerson:s
    ORDER BY s.@score+s.@friendScore DESC, s.id ASC
    LIMIT 100;
  
  PRINT res[res.id AS id, res.@score AS score, res.@friendScore AS friendScore]; 
}

INSTALL QUERY bi_10