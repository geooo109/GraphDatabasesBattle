//graph schema is on page 13 https://ldbc.github.io/ldbc_snb_docs/ldbc-snb-specification.pdf
//BI 16 query description is on page 74 https://ldbc.github.io/ldbc_snb_docs/ldbc-snb-specification.pdf

USE GRAPH ldbc_snb
DROP QUERY bi_16

CREATE QUERY bi_16(Set<VERTEX<Person>>  personId, STRING countryName, STRING tagClassName, INT minPathDistance, INT maxPathDistance) FOR GRAPH ldbc_snb {
  TYPEDEF tuple<INT person_id, STRING tag_name, INT messageCount> social;

  SumAccum<INT> @@counter = 1;
  SetAccum<INT> @visited;
  //SetAccum<VERTEX<Person>> @@personAll, @@personRange;
  OrAccum @valid = false;
  SetAccum<VERTEX<Person>> @@personRange;
  SumAccum<INT> @creatorId;
  SetAccum<VERTEX<Tag>> @@tagSel;
  OrAccum @isValid;
  SetAccum<STRING> @tagNames;
  GroupByAccum<INT person_id, STRING tag_name, SumAccum<INT> messageCount> @@socialGroup;
  HeapAccum<social>(100, messageCount DESC, tag_name ASC, person_id ASC) @@socialTop;

  vCountry = { Country.* };
  vCity = 
    SELECT t
    FROM vCountry:s-(City_IS_PART_OF_Country_REVERSE:e)->City:t
    WHERE s.name == countryName;

  vPerson =
    SELECT t
    FROM vCity:s-(Person_IS_LOCATED_IN_City_REVERSE:e)->Person:t
    POST-ACCUM t.@valid = true;
    //POST-ACCUM @@personAll += t;

  vPerson = { personId };
  WHILE @@counter <= maxPathDistance DO
    vPerson =
      SELECT t
      FROM vPerson:s-((Person_KNOWS_Person|Person_KNOWS_Person_REVERSE):e)-Person:t
      WHERE NOT t.@visited.contains(s.id)
      ACCUM 
        t.@visited += s.id,
        //CASE WHEN @@counter >= minPathDistance AND @@personAll.contains(t) THEN 
        CASE WHEN @@counter >= minPathDistance AND t.@valid == true THEN
          @@personRange += t
        END;

    @@counter += 1;
  END;

  vPerson = { @@personRange };
  vMessage =
    SELECT t
    FROM vPerson:s-((Comment_HAS_CREATOR_Person_REVERSE|Post_HAS_CREATOR_Person_REVERSE):e)->(Comment|Post):t
    ACCUM t.@creatorId += s.id;

  vTagClass = { TagClass.* };
  vTag =
    SELECT t
    FROM vTagClass:s-(Tag_HAS_TYPE_TagClass_REVERSE:e)->Tag:t
    WHERE s.name == tagClassName
    ACCUM @@tagSel += t;

  vMessage =
    SELECT s
    FROM vMessage:s-((Comment_HAS_TAG_Tag|Post_HAS_TAG_Tag):e)->Tag:t
    ACCUM 
      s.@tagNames += t.name,
      CASE WHEN @@tagSel.contains(t) THEN s.@isValid += True END
    POST-ACCUM
      CASE WHEN s.@isValid THEN
        FOREACH tn IN s.@tagNames DO
          @@socialGroup += (s.@creatorId, tn -> 1)
        END
      END;

  FOREACH (p,t,m) IN @@socialGroup DO
    @@socialTop += social(p, t, m);
  END;

  PRINT @@socialTop;
}

INSTALL QUERY bi_16